#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef map<int, int> mii;

ll _sieve_size;
bitset<10000010> bs;   // 10^7 should be enough for most cases
vi primes;   // compact list of primes in form of vector<int>


// first part

void sieve(ll upperbound) {          // create list of primes in [0..upperbound]
  _sieve_size = upperbound + 1;                   // add 1 to include upperbound
  bs.set();                                                 // set all bits to 1
  bs[0] = bs[1] = 0;                                     // except index 0 and 1
  for (ll i = 2; i <= _sieve_size; i++) if (bs[i]) {
    // cross out multiples of i starting from i * i!
    for (ll j = i * i; j <= _sieve_size; j += i) bs[j] = 0;
    primes.push_back((int)i);  // also add this vector containing list of primes
} }   

vi PF(ll N) {   // remember: vi is vector of integers, ll is long long
  vi factors;                    // vi `primes' (generated by sieve) is optional
  ll PF_idx = 0, PF = primes[PF_idx];     // using PF = 2, 3, 4, ..., is also ok
  while (N != 1 && (PF * PF <= N)) {   // stop at sqrt(N), but N can get smaller
    while (N % PF == 0) { N /= PF; factors.push_back(PF); }    // remove this PF
    PF = primes[++PF_idx];                              // only consider primes!
  }
  if (N != 1) factors.push_back(N);     // special case if N is actually a prime
  return factors;         // if pf exceeds 32-bit integer, you have to change vi
}

int main() {
  int n;
  vi data;
  int maks=0;
  int prime[1000000] = {0};
  sieve(1000000);
  
  cin>>n;
  
  data = PF(n);
  
  for(int i=0;i<data.size();i++)
  {
  	if(maks<data[i]) maks=data[i];
    prime[data[i]]++;
  }
     
  for(int i=2;i<=maks;i++)
  {
  	if(prime[i]==0) continue;
  	if(prime[i]==1) printf("%d",i);
	else if(prime[i]>=2) printf("%d^%d",i,prime[i]);
	if(i!=maks) printf(" x ");
  }
 
  printf("\n");
  return 0;
}
